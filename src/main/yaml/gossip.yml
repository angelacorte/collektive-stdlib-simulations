incarnation: collektive

variables:
  min: &min
    formula: System.getenv("MIN").toDouble()
    language: kotlin
  max: &max
    formula: System.getenv("MAX").toDouble()
    language: kotlin
  step: 1
  default: &default
    formula: System.getenv("DEFAULT").toDouble()
    language: kotlin
  seed: &seed
    type: LinearVariable
    parameters: [ *default, *min, *max, 1 ]
#  walking_speed: &walk-speed { default: 1.4, min: 1, max: 2, step: 0.1 }

seeds:
  scenario: *seed
  simulation: *seed

network-model:
  type: ConnectWithinDistance
  parameters: [8]

environment:
  type: ImageEnvironment
  parameters: [rectangle.png]

_pool: &program
  - time-distribution: 1
    type: Event
    actions:
      - type: RunCollektiveProgram
        parameters: [it.unibo.collektive.examples.EntrypointsKt.gossipEntrypoint]
#  - { type: Event, time-distribution: 10, actions: { type: LevyWalk, parameters: [ *walk-speed ] } }


deployments:
  - type: Rectangle
    parameters: [200, 2, 2, 50, 50]
    programs:
      - *program
    properties:
      - type: it.unibo.collektive.alchemist.device.sensors.impl.TimeSensorProperty
      - type: it.unibo.collektive.alchemist.device.sensors.impl.RandomNodeProperty

terminate:
  type: AfterTime
  parameters: 10

export:
  - type: CSVExporter
    parameters:
      fileNameRoot: "perf-gossip"
      interval: 1.0
      exportPath: "data"
    data:
      - time
      - molecule: best-value
        aggregators: [ min, max, mean, stdev ]
        value-filter: onlyfinite
        precision: 3
      - molecule: local-value
        aggregators: [ min, max, mean, stdev ]
        value-filter: onlyfinite
        precision: 3
      - molecule: path-length
        aggregators: [ min, max, mean, stdev ]
        value-filter: onlyfinite
        precision: 3
      - molecule: neighbors-size
        aggregators: [ min, max, mean, stdev ]
        value-filter: onlyfinite
        precision: 3